<File version="3.2">
  <FileID>2b8a89a1-17de-42d2-bdd6-77996ceb2233</FileID>
  <Preview>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
0WtSAMIgBQAREb0mBSAM2gJgd96RI0f06KOP6rHHHtPjjz+OiIj40PrII4/ozTffpACEoi0Adgcm
JiZq7969OnDgACIi4kOtzatjx45RAELV7jgrAACAl7h69aouXLhAAQhFuwPt0QBERESv6JZn92NU
FwBERMRolQKAiIgYhVIAEBERo1AKACIiYhRKAUBERIxCKQCIiIhRKAUAERExCqUAICIiRqEUAERE
xCiUAoCIiBiFUgAQERGjUAoAIiJiFEoBQEREjEIpAIiIiFEoBQARETEKpQAgIiJGoRQARETEKJQC
gIiIGIVSABAREaNQCgAiImIUSgFARESMQikAiIiIUSgFABERMQqlACAiIkahFABERMQolAKAiIgY
hVIAEBERo1AKACIiYhRKAUBERIxCKQCIiIhRKAUAERExCqUAICIiRqEUAERExCiUAoCIiBiFUgAQ
ERGjUAoAIiJiFEoBQEREjEIpAIiIiFEoBQARETEKpQAgIiJGoRQARETEKJQCgIiIGIVSABAREaNQ
CgAiImIUSgFARESMQikAiIiIUSgFABERMQr9kxSA86YA2AUjIiLiw+mkMWwFwNpuFmYXiIiIiA+3
c9kdlgIw1yQQERHx4TbkAtBiCsDtC0VERERv2GwcupcCsGjRourLkoYvGs2MiIiI6D1t+F8xeR4X
f/ruCsAfnn227kRcotMYEBER0bvGxSdp+YpVd1cAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAA/mT8xV/8//U2p37O5WUcAAAAAElFTkSuQmCC</Preview>
  <Form>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
b3fqwym5fN3/+D/U621zukwAAA==</Form>
  <Code><![CDATA[
$formRemoteWindowsUpdateI_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formRemoteWindowsUpdateI -Theme Light
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formRemoteWindowsUpdateI -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formRemoteWindowsUpdateI -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember,
		[System.Windows.Forms.DataGridViewAutoSizeColumnsMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($null -eq $Item)
	{
		$DataGridView.DataSource = $null
	}
	elseif ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}



function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterCIMProperties
			This switch removes CIM properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterCIMProperties)
	
	if($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($null -eq $InputObject)
	{
		$Table.Clear()
		return @( ,$Table)
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterCIMProperties -or -not $prop.Name.StartsWith('__')) #filter out CIM properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @(,$Table)
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ListBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
	{
		$ListBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ListBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ListBox.Items.Add($obj)
		}
		$ListBox.EndUpdate()
	}
	else
	{
		$ListBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ListBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}


#endregion

$buttonGetMissingUpdates_Click={
	#TODO: Place custom script here
	$MissingUpdates = Get-WmiObject -Class CCM_SoftwareUpdate -Filter ComplianceState=0 -Namespace root\CCM\ClientSDK -Computername $ComputerNameInput.text
	$MissingUpdatesCheckbox.Items.Clear()
	foreach ($item in $MissingUpdates)
	{
		$object = New-Object -TypeName PSObject -Prop ([ordered]@{
				#Computername = $Computername
				ArticleID    = $item.ArticleID
				Name		 = $item.Name
				URL		     = $item.URL
			})
	
		
		$MissingUpdatesCheckbox.Items.Add($item.name)
	}
	
	
	
	
}


$buttonVerify_Click={
	#TODO: Place custom script here
	$richtextbox1.Clear()
	
	$namespace = "ROOT\ccm\ClientSDK"
	$classname = "CCM_SoftwareUpdate"
	
	foreach ($item in $MissingUpdatesCheckbox.CheckedItems)
	{
		
		$richtextbox1.AppendText($item)
		$richtextbox1.AppendText("`n")
		$richtextbox1.AppendText('Initiate installation...')
		$richtextbox1.AppendText("`n")
		$missingupdates = Get-WmiObject -Class $classname -ComputerName $ComputerNameInput.text -Namespace $namespace | Where-Object name -EQ $MissingUpdatesCheckbox.CheckedItems
		$richtextbox1.AppendText('installing...')
		$richtextbox1.AppendText("`n")
		$MissingUpdatesArray = @($MissingUpdates | ForEach-Object { if ($_.ComplianceState -eq 0) { [WMI]$_.__PATH } })
		$Install = Invoke-WmiMethod -Class CCM_SoftwareUpdatesManager -Name InstallUpdates -ArgumentList ($MissingUpdatesArray) -Namespace root\ccm\clientsdk
		
	}
	
	
	<#

	$missingupdates = Get-WmiObject -Class $classname -ComputerName $ComputerNameInput.text -Namespace $namespace | Where-Object name -EQ $MissingUpdatesCheckbox.CheckedItems
	
	$MissingUpdatesArray = @($MissingUpdates | ForEach-Object { if ($_.ComplianceState -eq 0) { [WMI]$_.__PATH } })
	$Install = Invoke-WmiMethod -Class CCM_SoftwareUpdatesManager -Name InstallUpdates -ArgumentList ($MissingUpdatesArray) -Namespace root\ccm\clientsdk
	#>
	#$richtextbox1.AppendText('installing')
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>